{"name":"YamlLocalesJsonizer","tagline":"Simple generation of JSON data for a frontend from Rails-style YAML locales","body":"# YamlLocalesJsonizer\r\n\r\nSimple generation of JSON i18n data for the frontend based on Rails-style YAML\r\nlocales.\r\n\r\nThe gem provides the following:\r\n\r\n1. Asset file for the asset pipeline, to be used in production.\r\n2. View helper, to assist with locale updates in development.\r\n\r\nThe reason we need both an asset file and a view helper is that changes in\r\ndynamic assets derived from other resources are not being detected and picked\r\nup by sprockets properly, and they require a full server restart AND cache wipe\r\nto force the asset cache to be recompiled, and the change to get applied.\r\n\r\nTo provide better development experience, an action view helper allows to\r\noverride the asset file, and inject the correct JSON data into the page\r\ndirectly. Of course, due to the increased size of HTML pages, it is not a\r\nrecommended technique for production use.\r\n\r\n## Compatibility\r\n\r\nThe current version is built to support [i18next](http://i18next.com/), and\r\nproduces JSON data in the format expected by this tool. If you want to have\r\nsupport for other i18n engines - open an issue with a feature request, or\r\n(even better) - take a look at `styles/i18next.rb` file and send me a pull\r\nrequest.\r\n\r\n## Installation\r\n\r\nAdd this line to your application's Gemfile:\r\n\r\n    gem 'yaml_locales_jsonizer'\r\n\r\nAnd then execute:\r\n\r\n    $ bundle\r\n\r\nOr install it yourself as:\r\n\r\n    $ gem install yaml_locales_jsonizer\r\n\r\n## Usage\r\n\r\nAdd to your asset manifest file, for production:\r\n\r\n```\r\n//= require yaml_locales_jsonizer\r\n```\r\n\r\nFor effortless locale updates in dev environment, add a helper call to your\r\nview (e.g. layout file).  Make sure to add it AFTER your regular assets, to let\r\nit override cached asset data!\r\n\r\n```erb\r\n= javascript_include_tag 'application' # application assets\r\n= yaml_locales_jsonizer if Rails.env.development?\r\n```\r\n\r\nJSON data is exposed via `yaml_locales_jsonised` variable, so initialize\r\ni18next with this variable as the resource storage:\r\n\r\n```javascript\r\ni18n.init({resStore: yaml_locales_jsonized});\r\n```\r\n\r\n## Advanced configuration\r\n\r\nGem should be usable out of the box, loading all YAML locales available in\r\nRails. Additionally, it can be configured with an initializer, e.g.\r\n`config/initializers/yaml_locales_jsonizer.rb`. Example:\r\n\r\n```  ruby\r\nYamlLocalesJsonizer.configure do\r\n  # Add to or overwrite load path. By default the load path uses Rails' i18n\r\n  # settings available in Rails.configuration.i18n[:load_path]\r\n  load_path << \"/some/other/path\"\r\n\r\n  # Filter out files discovered via load_path, and jsonize only the ones\r\n  # matching the list. List could contain either file names, or shell-like\r\n  # glob patterns (matched with [File#fnmatch](http://www.ruby-doc.org/core-2.1.0/File.html#method-c-fnmatch))\r\n  only_files %w(ru.yml en.yml)\r\nend\r\n\r\n```\r\n\r\n## Contributing\r\n\r\n1. Fork it\r\n2. Create your feature branch (`git checkout -b my-new-feature`)\r\n3. Commit your changes (`git commit -am 'Add some feature'`)\r\n4. Push to the branch (`git push origin my-new-feature`)\r\n5. Create new Pull Request\r\n","google":"UA-6087444-3","note":"Don't delete this file! It's used internally to help with page regeneration."}